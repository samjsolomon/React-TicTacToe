{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sam/Desktop/School/CMS 450/React-TicTacToe/tictactoe/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Square class, each square is a modified button element\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n} // board component, containing the grid of squares\n\n\n_c = Square;\n\nclass Board extends React.Component {\n  // render square method, calling it simply returns a square, which is defined above\n  renderSquare(i) {\n    // i represents the position of the square.\n    // onClick returns a new function, with the parameter i passed into it\n    // This binding is necessary to make 'this' work in the callback\n    // same as '() => this.props.onClick(i) which returns an arrow function with proper this binding,\n    // also if we don't return another function in the onClick then this.props.onClick gets called right away, not when the button gets clicked\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[i],\n      onClick: this.props.onClick.bind(this, i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 ? false : true\n    });\n  }\n\n  handleClick(i) {\n    // history holds the array of squares, one array for each additional move made, slice makes sure the array is chopped off if we decide to go back to a certain step and start from there\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    let status;\n\n    if (winner) {\n      status = 'Winner ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Move #' + move : 'Game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 125,\n  columnNumber: 3\n}, this), document.getElementById('container'));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/sam/Desktop/School/CMS 450/React-TicTacToe/tictactoe/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","bind","render","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","jumpTo","step","setState","handleClick","slice","current","length","calculateWinner","concat","winner","status","moves","map","move","desc","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// Square class, each square is a modified button element\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\n// board component, containing the grid of squares\nclass Board extends React.Component {\n  // render square method, calling it simply returns a square, which is defined above\n  renderSquare(i) {\n    // i represents the position of the square.\n    // onClick returns a new function, with the parameter i passed into it\n    // This binding is necessary to make 'this' work in the callback\n    // same as '() => this.props.onClick(i) which returns an arrow function with proper this binding,\n    // also if we don't return another function in the onClick then this.props.onClick gets called right away, not when the button gets clicked\n    return <Square value={this.props.squares[i]} onClick={this.props.onClick.bind(this, i)} />;\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true\n    });\n  }\n  handleClick(i) {\n    // history holds the array of squares, one array for each additional move made, slice makes sure the array is chopped off if we decide to go back to a certain step and start from there\n    const history = this.state.history.slice(0, this.state.stepNumber+1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n        history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length\n    });\n  }\n  render() {\n\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    let status;\n    if (winner) {\n      status = 'Winner ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      return (\n        <li key={move}>\n          <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n        </li>\n      );\n    });\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={ (i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}